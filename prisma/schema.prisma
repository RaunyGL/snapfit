// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define o modelo de usuário
model User {
  id            String         @id @default(uuid())
  name          String
  email         String      @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  // Relacionamento um-para-um com as estatísticas diárias do usuário
  dailyStats    DailyStats?
  // Relacionamento um-para-muitos com as refeições do usuário
  meals         Meal[]
  // Relacionamento muitos-para-muitos com os alimentos favoritos do usuário
  favoriteFoods Food[]      @relation("FavoriteFoods")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt ()
  breakFasts    BreakFast[]
  lunches       Lunch[]
  afternoonCoffees AfternoonCoffee[]
  dinners       Dinner[]
  @@map("users")
}

// Define o modelo de estatísticas diárias do usuário
model DailyStats {
  id               String     @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String      @unique
  date             DateTime
  dailyCalories    Int
  weeklyWeightLoss Float
}

// Define o modelo de alimento
model Food {
  id          String     @id @default(uuid())
  name        String
  calories    Int
  servingSize String
  imageUrl    String?
  quantity   String?
  unit       String?
  // Relacionamento muitos-para-muitos com as refeições
  meals       Meal[]  @relation("MealFoods")
  // Relacionamento muitos-para-muitos com os usuários que favoritaram o alimento
  users       User[]  @relation("FavoriteFoods")
  breakFasts  BreakFast[]
  lunches     Lunch[]
  afternoonCoffees AfternoonCoffee[]
  dinners     Dinner[]
}

//Define o BreakFast
model BreakFast {
  id      String       @id @default(uuid())
  date    DateTime
  userId  String
  user    User      @relation(fields: [userId], references: [id])
  foodId  String
  food    Food      @relation(fields: [foodId], references: [id])
}

model Lunch {
  id      String       @id @default(uuid())
  date    DateTime
  userId  String
  user    User      @relation(fields: [userId], references: [id])
  foodId  String
  food    Food      @relation(fields: [foodId], references: [id])
}

model AfternoonCoffee {
  id      String       @id @default(uuid())
  date    DateTime
  userId  String
  user    User      @relation(fields: [userId], references: [id])
  foodId  String
  food    Food      @relation(fields: [foodId], references: [id])
}

model Dinner {
  id      String       @id @default(uuid())
  date    DateTime
  userId  String
  user    User      @relation(fields: [userId], references: [id])
  foodId  String
  food    Food      @relation(fields: [foodId], references: [id])
}

// Define o modelo de refeição
model Meal {
  id            String      @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  date          DateTime
  time          String
  totalCalories Int
  // Relacionamento muitos-para-muitos com os alimentos
  foods         Food[]   @relation("MealFoods")
}

// Define o modelo de receita
model Recipe {
  id          String         @id @default(uuid())
  title       String
  description String
  ingredients Ingredient[]
}

// Define o modelo de ingrediente
model Ingredient {
  id       String    @id @default(uuid())
  name     String
  quantity String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}